# NexusController v2.0 - Container Deployment
# Production-ready container orchestration

version: '3.8'

services:
  # Main NexusController application
  nexus-controller:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nexus-controller
    restart: unless-stopped
    environment:
      - NEXUS_ENV=production
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    volumes:
      - nexus-data:/app/.nexus
      - nexus-logs:/app/.nexus/logs
      - nexus-backups:/app/.nexus/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For container monitoring
    ports:
      - "8080:8080"  # Web API port
      - "5901:5901"   # VNC for GUI access
    networks:
      - nexus-network
    depends_on:
      - nexus-redis
      - nexus-postgres
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and session management
  nexus-redis:
    image: redis:7-alpine
    container_name: nexus-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-nexus123}
    volumes:
      - nexus-redis-data:/data
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data storage
  nexus-postgres:
    image: postgres:15-alpine
    container_name: nexus-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=nexuscontroller
      - POSTGRES_USER=nexus
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-nexus123}
    volumes:
      - nexus-postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexus -d nexuscontroller"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy and load balancer
  nexus-nginx:
    image: nginx:alpine
    container_name: nexus-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nexus-logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - nexus-network
    depends_on:
      - nexus-controller
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  nexus-prometheus:
    image: prom/prometheus:latest
    container_name: nexus-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - nexus-prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - nexus-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for monitoring dashboards
  nexus-grafana:
    image: grafana/grafana:latest
    container_name: nexus-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - nexus-grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - nexus-network
    depends_on:
      - nexus-prometheus

  # HashiCorp Vault for secrets management
  nexus-vault:
    image: vault:latest
    container_name: nexus-vault
    restart: unless-stopped
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN:-nexus-dev-token}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    ports:
      - "8200:8200"
    networks:
      - nexus-network
    cap_add:
      - IPC_LOCK
    volumes:
      - nexus-vault-data:/vault/data
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  nexus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  nexus-data:
    driver: local
  nexus-logs:
    driver: local
  nexus-backups:
    driver: local
  nexus-redis-data:
    driver: local
  nexus-postgres-data:
    driver: local
  nexus-prometheus-data:
    driver: local
  nexus-grafana-data:
    driver: local
  nexus-vault-data:
    driver: local